generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  GURU
  SISWA
  ORANG_TUA
}

enum JenisKelamin {
  LAKI_LAKI
  PEREMPUAN
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      UserRole
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  admin     Admin?
  guru      Guru?
  siswa     Siswa?
  orangTua  OrangTua?

  @@map("users")
}

model Admin {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  nama      String
  nip       String?  @unique
  foto      String?
  telepon   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admin")
}

// ========== DATA GURU ==========

model Guru {
  id            String       @id @default(cuid())
  userId        String       @unique
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  nip           String       @unique
  nama          String
  jenisKelamin  JenisKelamin
  tempatLahir   String?
  tanggalLahir  DateTime?
  alamat        String?
  telepon       String?
  foto          String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  // Relations
  waliKelas     WaliKelas?
  pengampu      PengampuMapel[]

  @@map("guru")
}

// ========== DATA SISWA ==========

model Siswa {
  id            String       @id @default(cuid())
  userId        String       @unique
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  nis           String       @unique
  nisn          String?      @unique
  nama          String
  jenisKelamin  JenisKelamin
  tempatLahir   String?
  tanggalLahir  DateTime?
  alamat        String?
  telepon       String?
  foto          String?
  kelasId       String?
  kelas         Kelas?       @relation(fields: [kelasId], references: [id], onDelete: SetNull)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  // Relations
  orangTua      OrangTua[]
  nilai         Nilai[]
  absensi       Absensi[]

  @@map("siswa")
}

// ========== DATA ORANG TUA ==========

model OrangTua {
  id            String       @id @default(cuid())
  userId        String       @unique
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  nama          String
  jenisKelamin  JenisKelamin
  hubungan      String       // Ayah, Ibu, Wali
  pekerjaan     String?
  telepon       String?
  alamat        String?
  siswaId       String
  siswa         Siswa        @relation(fields: [siswaId], references: [id], onDelete: Cascade)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@map("orang_tua")
}

// ========== STRUKTUR AKADEMIK ==========

model TahunAjaran {
  id          String    @id @default(cuid())
  nama        String    // e.g., "2024/2025"
  tahunMulai  Int       // e.g., 2024
  tahunAkhir  Int       // e.g., 2025
  isActive    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  semester    Semester[]

  @@map("tahun_ajaran")
}

enum JenisSemester {
  GANJIL
  GENAP
}

model Semester {
  id            String        @id @default(cuid())
  tahunAjaranId String
  tahunAjaran   TahunAjaran   @relation(fields: [tahunAjaranId], references: [id], onDelete: Cascade)
  jenis         JenisSemester
  isActive      Boolean       @default(false)
  tanggalMulai  DateTime?
  tanggalAkhir  DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  nilai         Nilai[]

  @@map("semester")
}

model Kelas {
  id          String   @id @default(cuid())
  nama        String   // e.g., "X IPA 1", "VII A"
  tingkat     Int      // e.g., 7, 8, 9, 10, 11, 12
  jurusan     String?  // e.g., "IPA", "IPS", null untuk SMP
  kapasitas   Int      @default(30)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  siswa       Siswa[]
  waliKelas   WaliKelas?
  pengampu    PengampuMapel[]

  @@map("kelas")
}

model WaliKelas {
  id        String   @id @default(cuid())
  guruId    String   @unique
  guru      Guru     @relation(fields: [guruId], references: [id], onDelete: Cascade)
  kelasId   String   @unique
  kelas     Kelas    @relation(fields: [kelasId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("wali_kelas")
}

// ========== MATA PELAJARAN ==========

model MataPelajaran {
  id          String   @id @default(cuid())
  kode        String   @unique
  nama        String
  deskripsi   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  pengampu    PengampuMapel[]
  nilai       Nilai[]

  @@map("mata_pelajaran")
}

// Relasi Guru mengajar Mapel di Kelas tertentu
model PengampuMapel {
  id              String        @id @default(cuid())
  guruId          String
  guru            Guru          @relation(fields: [guruId], references: [id], onDelete: Cascade)
  mataPelajaranId String
  mataPelajaran   MataPelajaran @relation(fields: [mataPelajaranId], references: [id], onDelete: Cascade)
  kelasId         String
  kelas           Kelas         @relation(fields: [kelasId], references: [id], onDelete: Cascade)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@unique([guruId, mataPelajaranId, kelasId])
  @@map("pengampu_mapel")
}

// ========== NILAI ==========

model Nilai {
  id              String        @id @default(cuid())
  siswaId         String
  siswa           Siswa         @relation(fields: [siswaId], references: [id], onDelete: Cascade)
  mataPelajaranId String
  mataPelajaran   MataPelajaran @relation(fields: [mataPelajaranId], references: [id], onDelete: Cascade)
  semesterId      String
  semester        Semester      @relation(fields: [semesterId], references: [id], onDelete: Cascade)
  nilaiTugas      Float?
  nilaiUTS        Float?
  nilaiUAS        Float?
  nilaiAkhir      Float?
  keterangan      String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@unique([siswaId, mataPelajaranId, semesterId])
  @@map("nilai")
}

// ========== ABSENSI ==========

enum StatusAbsensi {
  HADIR
  IZIN
  SAKIT
  ALPA
}

model Absensi {
  id        String         @id @default(cuid())
  siswaId   String
  siswa     Siswa          @relation(fields: [siswaId], references: [id], onDelete: Cascade)
  tanggal   DateTime
  status    StatusAbsensi
  keterangan String?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@unique([siswaId, tanggal])
  @@map("absensi")
}