generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//////////////////////////////
// ENUMS
//////////////////////////////

enum Role {
  ADMIN
  STAFF
}

enum Gender {
  MALE
  FEMALE
}

enum ApplicantStatus {
  PENDING
  ACCEPTED
  REJECTED
  WAITLIST
}

enum ContentType {
  SAMBUTAN_KEPALA_SEKOLAH
  VISI_MISI
  SEJARAH
  FILOSOFI
  STRUKTUR_ORGANISASI
  FASILITAS
  EKSTRAKURIKULER
  OUTING_CLASS
  BERITA
  PENGUMUMAN
  GALERI
  KONTAK
  PENGATURAN
}

//////////////////////////////
// MODELS
//////////////////////////////

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  name      String?
  role      Role      @default(ADMIN)
  isActive  Boolean   @default(true)
  lastLogin DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  contents  Content[]
  uploads   Media[]     @relation("UploadedMedia")
  Applicant Applicant[]
  AuditLog  AuditLog[]

  @@map("users")
}

model Teacher {
  id        Int      @id @default(autoincrement())
  nip       String?  @unique
  name      String
  email     String?
  phone     String?
  address   String?
  gender    Gender?
  photo     String? // Cloudinary URL
  meta      Json? // fleksibel: sertifikat, mapel, pengalaman
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("teachers")
}

model Student {
  id          Int        @id @default(autoincrement())
  nis         String?    @unique
  name        String
  birthDate   DateTime?
  gender      Gender?
  address     String?
  phone       String?
  photo       String? // Cloudinary URL
  className   String? // contoh: "Kelas 9A"
  applicantId Int?       @unique
  applicant   Applicant? @relation(fields: [applicantId], references: [id])
  meta        Json?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("students")
}

model Applicant {
  id            Int             @id @default(autoincrement())
  fullname      String
  email         String?
  phone         String?
  birthDate     DateTime?
  gender        Gender?
  address       String?
  schoolOrigin  String?
  chosenProgram String?
  status        ApplicantStatus @default(PENDING)
  documents     Json? // contoh: [{ name, url, public_id }]
  year          Int             @default(2025)
  submittedAt   DateTime        @default(now())
  reviewedAt    DateTime?
  notes         String?
  reviewedById  Int?
  reviewedBy    User?           @relation(fields: [reviewedById], references: [id])

  // hubungan ke Student (1-1)
  student Student?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status])
  @@index([year])
  @@map("applicants")
}

model Content {
  id          Int         @id @default(autoincrement())
  type        ContentType
  title       String?
  slug        String?     @unique
  body        String? // markdown/html
  images      Json? // array of {url, public_id, alt, caption}
  meta        Json? // fleksibel untuk tambahan data (mis: kontak)
  isPublished Boolean     @default(false)
  publishedAt DateTime?
  createdById Int?
  createdBy   User?       @relation(fields: [createdById], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([type])
  @@index([isPublished, publishedAt])
  @@map("contents")
}

model Media {
  id         Int      @id @default(autoincrement())
  url        String
  publicId   String? // Cloudinary public_id
  filename   String?
  width      Int?
  height     Int?
  mime       String?
  size       Int?
  uploadedBy Int?
  uploader   User?    @relation("UploadedMedia", fields: [uploadedBy], references: [id])
  createdAt  DateTime @default(now())

  @@map("media")
}

//////////////////////////////
// OPTIONAL - AUDIT LOG
//////////////////////////////

model AuditLog {
  id        Int      @id @default(autoincrement())
  userId    Int?
  user      User?    @relation(fields: [userId], references: [id])
  action    String
  entity    String // misal: "Applicant", "Student"
  entityId  Int?
  details   Json?
  createdAt DateTime @default(now())

  @@map("audit_logs")
}
